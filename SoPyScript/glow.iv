#Inventor V2.0 ascii

DEF root Separator {
   DEF Script1 SoPyScript {
      fields [ SoSFString foo, SFVec3f color ]
      foo "Muh sagt die Kuh!"
      color 0 0 1
      script "
print '== Script1 =='
print color.getValue().getValue()
print foo.getValue().getString()
"
   }
   Material { diffuseColor = USE Script1.color }
   Sphere {}
   Material { diffuseColor 1.0 0.0 0.0 }
   DEF Script2 SoPyScript {
      fields [ SoSFColor color, SoSFFloat brightness, SoSFFloat transparency ]
      color 0 1 0
      brightness 0.1
      transparency 0.5
      script "
# Initialize the color Packer (required of any property node that
# uses an SoColorPacker to set diffuse color or transparency:
colorPacker = SoColorPacker()
transpValue = floatp()

def doAction(action):
    global transpValue

    if not brightness.isIgnored() and not SoOverrideElement.getEmissiveColorOverride(action.getState()):
        emissiveColor = SbColor_mul(color.getValue(), brightness.getValue())

        # Use the Lazy element to set emissive color. 
        # Note that this will not actually send the color to GL.       
        SoLazyElement.setEmissive(action.getState(), emissiveColor)

    # To send transparency we again check ignore flag and override element.
    if not transparency.isIgnored() and not SoOverrideElement.getTransparencyOverride(action.getState()):
        # keep a copy of the transparency that we are putting in the state:
        transpValue.assign(transparency.getValue())
     
        # The color packer must be provided when the transparency is set,
        # so that the transparency will be merged with current diffuse color
        # in the state:
        SoLazyElement.setTransparency(action.getState(), self, 1, transpValue, colorPacker)

def GLRender(action):
    action.setTransparencyType(SoGLRenderAction.SORTED_OBJECT_BLEND)
    doAction(action)

def callback(action):
    doAction(action)

print self
"
   }
   Cone {}
}
